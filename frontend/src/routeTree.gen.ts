/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LandingRouteRouteImport } from './routes/_landing/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as LandingIndexRouteImport } from './routes/_landing/index'
import { Route as AppProfileRouteImport } from './routes/_app/profile'
import { Route as AppDiscoverRouteImport } from './routes/_app/discover'
import { Route as AppCreateRouteImport } from './routes/_app/create'

const LandingRouteRoute = LandingRouteRouteImport.update({
  id: '/_landing',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingIndexRoute = LandingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LandingRouteRoute,
} as any)
const AppProfileRoute = AppProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDiscoverRoute = AppDiscoverRouteImport.update({
  id: '/discover',
  path: '/discover',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppCreateRoute = AppCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/create': typeof AppCreateRoute
  '/discover': typeof AppDiscoverRoute
  '/profile': typeof AppProfileRoute
  '/': typeof LandingIndexRoute
}
export interface FileRoutesByTo {
  '/create': typeof AppCreateRoute
  '/discover': typeof AppDiscoverRoute
  '/profile': typeof AppProfileRoute
  '/': typeof LandingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/_landing': typeof LandingRouteRouteWithChildren
  '/_app/create': typeof AppCreateRoute
  '/_app/discover': typeof AppDiscoverRoute
  '/_app/profile': typeof AppProfileRoute
  '/_landing/': typeof LandingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/create' | '/discover' | '/profile' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/create' | '/discover' | '/profile' | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_landing'
    | '/_app/create'
    | '/_app/discover'
    | '/_app/profile'
    | '/_landing/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  LandingRouteRoute: typeof LandingRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_landing': {
      id: '/_landing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LandingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_landing/': {
      id: '/_landing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LandingIndexRouteImport
      parentRoute: typeof LandingRouteRoute
    }
    '/_app/profile': {
      id: '/_app/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/discover': {
      id: '/_app/discover'
      path: '/discover'
      fullPath: '/discover'
      preLoaderRoute: typeof AppDiscoverRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/create': {
      id: '/_app/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof AppCreateRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppCreateRoute: typeof AppCreateRoute
  AppDiscoverRoute: typeof AppDiscoverRoute
  AppProfileRoute: typeof AppProfileRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppCreateRoute: AppCreateRoute,
  AppDiscoverRoute: AppDiscoverRoute,
  AppProfileRoute: AppProfileRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface LandingRouteRouteChildren {
  LandingIndexRoute: typeof LandingIndexRoute
}

const LandingRouteRouteChildren: LandingRouteRouteChildren = {
  LandingIndexRoute: LandingIndexRoute,
}

const LandingRouteRouteWithChildren = LandingRouteRoute._addFileChildren(
  LandingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  LandingRouteRoute: LandingRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
