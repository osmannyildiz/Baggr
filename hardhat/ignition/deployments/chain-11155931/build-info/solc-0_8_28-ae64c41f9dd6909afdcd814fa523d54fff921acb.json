{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-ae64c41f9dd6909afdcd814fa523d54fff921acb",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/MockMarket.sol": "project/contracts/MockMarket.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "project/contracts/IMockMarket.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\ninterface IMockMarket {\n    function tokenPrice(address token) external view returns (uint256 weiPerToken);\n\n    function buy(address token) external payable;\n    function sell(address token, uint256 tokensIn) external;\n\n    function previewBuy(address token, uint256 ethInWei) external view returns (uint256 tokensOut);\n    function previewSell(address token, uint256 tokensIn) external view returns (uint256 ethOutWei);\n\n    function debug_ethBalance() external view returns (uint256 ethWei);\n    function debug_tokenBalance(address token) external view returns (uint256 tokenUnits);\n}\n"
      },
      "project/contracts/MockMarket.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IMockMarket } from \"./IMockMarket.sol\";\n\ncontract MockMarket is IMockMarket {\n    address public owner;\n\n    mapping(address => uint256) public override tokenPrice;\n\n    event Bought(address indexed user, uint256 ethIn, uint256 tokensOut);\n    event Sold(address indexed user, uint256 tokensIn, uint256 ethOut);\n    event PricesUpdated(uint256 buyPrice, uint256 sellPrice);\n    event OwnerChanged(address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"not owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    receive() external payable {} // owner can preload ETH by sending value\n\n    /* ---------- User: buy & sell ---------- */\n\n    // Send ETH, receive tokens at buyPrice (tokens per 1 ETH)\n    function buy(address token) external payable override {\n        require(msg.value > 0, \"no ETH\");\n        \n        uint256 tokensOut = (msg.value * tokenPrice[address(token)]) / 1e18;\n        require(tokensOut > 0, \"dust\");\n        require(IERC20(token).balanceOf(address(this)) >= tokensOut, \"insufficient token\");\n\n        // transfer tokens to user\n        require(IERC20(token).transfer(msg.sender, tokensOut), \"token transfer failed\");\n\n        emit Bought(msg.sender, msg.value, tokensOut);\n        // ETH stays in the contract as liquidity\n    }\n\n    // Sell tokens for ETH at sellPrice (tokens per 1 ETH)\n    function sell(address token, uint256 tokensIn) external override {\n        require(tokensIn > 0, \"no tokens\");\n\n        // pull tokens from user\n        require(IERC20(token).transferFrom(msg.sender, address(this), tokensIn), \"token transferFrom failed\");\n\n        // compute ETH out\n        uint256 ethOut = (tokensIn * 1e18) / tokenPrice[address(token)];\n        require(ethOut > 0, \"dust\");\n        require(address(this).balance >= ethOut, \"insufficient ETH\");\n\n        // pay ETH to user\n        (bool ok, ) = payable(msg.sender).call{value: ethOut}(\"\");\n        require(ok, \"ETH send failed\");\n\n        emit Sold(msg.sender, tokensIn, ethOut);\n    }\n\n    /* ---------- Admin ---------- */\n\n    function setTokenPrice(address token, uint256 newPrice) external onlyOwner {\n        require(token != address(0), \"bad token\");\n        require(newPrice > 0, \"bad price\");\n        tokenPrice[token] = newPrice;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"bad owner\");\n        owner = newOwner;\n        emit OwnerChanged(newOwner);\n    }\n\n    // Simple withdrawals to move liquidity around (optional quality-of-life)\n    function withdrawETH(address payable to, uint256 amount) external onlyOwner {\n        (bool ok, ) = to.call{value: amount}(\"\");\n        require(ok, \"withdraw ETH failed\");\n    }\n    function withdrawToken(address token, address to, uint256 amount) external onlyOwner {\n        require(IERC20(token).transfer(to, amount), \"withdraw token failed\");\n    }\n\n    /* ---------- Views ---------- */\n\n    function previewBuy(address token, uint256 ethInWei) external view returns (uint256) {\n        return (ethInWei * tokenPrice[address(token)]) / 1e18;\n    }\n\n    function previewSell(address token, uint256 tokensIn) external view returns (uint256) {\n        return (tokensIn * 1e18) / tokenPrice[address(token)];\n    }\n\n    /* ---------- Debug ---------- */\n\n    function debug_ethBalance() external view override returns (uint256 ethWei) {\n        return address(this).balance;\n    }\n\n    function debug_tokenBalance(address token) external view override returns (uint256 tokenUnits) {\n        return IERC20(token).balanceOf(address(this));\n    }\n}\n"
      }
    }
  }
}